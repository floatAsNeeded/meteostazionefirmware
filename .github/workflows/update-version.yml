name: Update version.json on Release

on:
  release:
    types: [created]  # Triggers only on new release creation (not edits or prereleases)

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Needed for git operations

      - name: Fetch release assets and update version.json
        run: |
          # Get the release ID from the event
          RELEASE_ID="${{ github.event.release.id }}"
          TAG="${{ github.ref_name }}"  # e.g., v4.1.10 (strips 'refs/tags/')

          # Fetch release assets via GitHub API
          ASSETS_JSON=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets")

          # Extract download URLs using jq (install if needed, but ubuntu-latest has it)
          URL_868=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name == "meteostazionefirmware_receiver_868.ino.bin") | .browser_download_url // empty')
          URL_915=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name == "meteostazionefirmware_receiver_915.ino.bin") | .browser_download_url // empty')

          # Validate assets exist
          if [ -z "$URL_868" ] || [ -z "$URL_915" ]; then
            echo "Error: Required assets not found in release $RELEASE_ID"
            exit 1
          fi

          # Create/update version.json with new version and URLs
          cat > version.json << EOF
          {
            "868": {
              "version": "$TAG",
              "url": "$URL_868"
            },
            "915": {
              "version": "$TAG",
              "url": "$URL_915"
            }
          }
          EOF

          # Format JSON nicely (optional, using jq)
          jq . version.json > version.json.tmp && mv version.json.tmp version.json

      - name: Commit and push updated version.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update version.json for release $TAG"
            git push
          fi


